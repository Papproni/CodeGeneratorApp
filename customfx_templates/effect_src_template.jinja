/*THIS FILE IS GENERATED! DO NOT MODIFY!
Generated on: {{ date }} */

#ifndef SAB_{{ name|upper }}_H
#define SAB_{{ name|upper }}_H

#include "SAB_{{name}}.h"
#include <math.h>
#include <stdint.h>


typedef enum {
    LPF,
    HPF,
    BANDPASS,
    NOTCH
} FilterType;

typedef struct {
    float b0, b1, b2; // Numerator coefficients
    float a1, a2;     // Denominator coefficients
} BiquadCoeffs;

void calculate_biquad_coeffs(float32_t* coeffs_af32,FilterType type, float freq, float Q, float sample_rate) {
    float omega = 2.0f * PI * freq / sample_rate;
    float alpha = sinf(omega) / (2.0f * Q);
    float cos_omega = cosf(omega);

    BiquadCoeffs coeffs;

    switch (type) {
        case LPF:
            coeffs.b0 = (1.0f - cos_omega) / 2.0f;
            coeffs.b1 = 1.0f - cos_omega;
            coeffs.b2 = (1.0f - cos_omega) / 2.0f;
            coeffs.a1 = -2.0f * cos_omega;
            coeffs.a2 = 1.0f - alpha;
            break;

        case HPF:
            coeffs.b0 = (1.0f + cos_omega) / 2.0f;
            coeffs.b1 = -(1.0f + cos_omega);
            coeffs.b2 = (1.0f + cos_omega) / 2.0f;
            coeffs.a1 = -2.0f * cos_omega;
            coeffs.a2 = 1.0f - alpha;
            break;

        case BANDPASS:
            coeffs.b0 = alpha;
            coeffs.b1 = 0.0f;
            coeffs.b2 = -alpha;
            coeffs.a1 = -2.0f * cos_omega;
            coeffs.a2 = 1.0f - alpha;
            break;

        case NOTCH:
            coeffs.b0 = 1.0f;
            coeffs.b1 = -2.0f * cos_omega;
            coeffs.b2 = 1.0f;
            coeffs.a1 = -2.0f * cos_omega;
            coeffs.a2 = 1.0f - alpha;
            break;
    }

    // Normalize coefficients
    float a0 = 1.0f + alpha;
    coeffs.b0 /= a0;
    coeffs.b1 /= a0;
    coeffs.b2 /= a0;
    coeffs.a1 /= a0;
    coeffs.a2 /= a0;

    self->coeffs_af32[0]=coeffs.b0;
    self->coeffs_af32[1]=coeffs.b1;
    self->coeffs_af32[2]=coeffs.b2;
    self->coeffs_af32[3]=coeffs.a1;
    self->coeffs_af32[4]=coeffs.a2;
}

// Process Function for SAB_{{ name }}_tst
void SAB_{{ name }}_init( SAB_{{ name }}_tst* self){

    strcpy(self->intercom_fx_data.name, "{{ name | upper}}");
	self->intercom_fx_data.color[0] = 255; 	// R
	self->intercom_fx_data.color[1] = 0;	// G
	self->intercom_fx_data.color[2] = 0;	// B
	self->intercom_fx_data.fx_state_en = FX_STATE_OFF;

	// PARAMS:
    {% for control in control_params %}
    add_parameter(&self->intercom_parameters_aun[{{ loop.index0 }}],"{{control.display_name}}",PARAM_TYPE_POT,69);
    {%- endfor %}

    // Generated outputs from other Jinja templates
    {% for init_output in generated_init_outputs -%}
    {{ init_output }}
    {%- endfor %}

};

// Process Function for SAB_{{ name }}_tst
int SAB_{{ name }}_process( SAB_{{ name }}_tst* self, float input_f32, float output_f32){

    {%- for control in control_params -%}
    {%- if control.display_name != 'None' %}
    // {{control.display_name}}
    self->param_{{ loop.index0 +1}}_value = conv_raw_to_param_value(&self->intercom_parameters_aun[{{ loop.index0 }}].value,{{control.min_value}}, {{control.max_value}});
    {%- endif %}
    {%- endfor %}

    // Generated outputs from other Jinja templates
    {% for process_output in generated_process_outputs %}
    {{ process_output }}
    {% endfor %}
};