/*THIS FILE IS GENERATED! DO NOT MODIFY!
Generated on: {{ date }} */

#ifndef SAB_{{ lib_name|upper }}_H
#define SAB_{{ lib_name|upper }}_H


#include "stdint.h"
#include "sab_intercom.h"

// Generated effect libs
{%- for effect in effects %}
#include "SAB_{{ effect.name }}.h"
{%- endfor %}


// Manager structure: {{ lib_name }}
typedef struct {
} SAB_{{ lib_name }}_tst;


// Process Function for SAB_{{ lib_name }}_tst
int SAB_{{ lib_name }}_init( SAB_{{ lib_name }}_tst* self, float input_f32, float output_f32);

// Process Function for SAB_{{ lib_name }}_tst
int SAB_{{ lib_name }}_process( SAB_{{ lib_name }}_tst* self, float input_f32, float output_f32);

// Enum representing different effect types
typedef enum {
    {%- for effect in effects %}
    {{ effect.name | upper }},
    {%- endfor %}
} EffectType;

// Struct for a guitar effect with function pointers
typedef struct {
    void (*init)(void*);           // Function pointer to initialize the effect
    int (*process)(void*);         // Function pointer to process the effect
    void (*delete)(void*);
} GuitarEffect;

void init_effect_chain(GuitarEffect** chain, EffectType* fx_chain, int chain_length) {
    for (int i = 0; i < chain_length; ++i) {
        switch (fx_chain[i]) {
        {%- for effect in effects %}
        case {{ effect.name | upper }}:
            chain[i] = (GuitarEffect*)malloc(sizeof(SAB_{{ effect.name}}_tst));
            chain[i]->init = SAB_{{ effect.name }}_init;
            chain[i]->process = SAB_{{ effect.name }}_process;
            chain[i]->delete  = SAB_{{ effect.name }}_delete;
            break;
        {%- endfor %}
        default:
            printf("Unknown effect type!\n");
            break;
        }
        // Initialize the effect
        chain[i]->init(chain[i]);
    }
}

// Function to process all effects in the chain
void process_effect_chain(GuitarEffect** chain, int chain_length) {
    for (int i = 0; i < chain_length; ++i) {
        chain[i]->process(chain[i]);
    }
}

// Cleanup the effects in the chain
void cleanup_effect_chain(GuitarEffect** chain, int chain_length) {
    for (int i = 0; i < chain_length; ++i) {
        free(chain[i]);  // Free the allocated memory for each effect
    }
}

#endif
